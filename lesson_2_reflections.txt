1.What happens when you initialise a repository? Why do you need to do it?
When we initialise a repository using the command git init, a new empty git repository is initialised.
2.How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an intermediate area between the working directory and the git repository. We can add files that we wish to commit 
to the staging area using the command git add <file name> and then when we run git commit, the entire staging area contents are added 
to the git repository.
3.How can you use the staging area to make sure you have one commit per logical change?
Instead of committing each and every physical change that we do (that are part of the same logical change), we can add  these to the
staging area. Once all the changes corresponding to the logical change are done, we can then run the git commit, to add the entire staging
area contents to the git repository.
4.What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Suppose we wish to work on a new feature or enhancement, it is always wise to keep the working code untouched and do our 
modifications on a copy of it. To do this git allows us to create a new branch where we can work, while the main branch can remain intact.
5.How do the diagrams help you visualize the branch structure?
The diagram representing the branch structure, helps in knowing the parent-child relationship between the different commits and also spot
out the commits that are unreachable.
6.What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together gives a commit with the combined features and changes made in two different versions of the code.
7.What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
When we do merging manually we can resolve the conflicts that is changes made to the same part of the code and resolve them in the best way
instead of allowing git itself to decide on that when doing an automatic merge.


